FUNCTION_BLOCK driver

VAR_INPUT
  sensor_1 : REAL;
  sensor_2 : REAL;
  sensor_3 : REAL;
END_VAR

VAR_OUTPUT
  motor_esquerdo : REAL;
END_VAR


FUZZIFY sensor_1
  TERM sem_contato    := TRAPE 0 0.3 0.6 0.8;
  TERM contato  := TRAPE 0.6 0.75 0.85 1;
END_FUZZIFY

FUZZIFY sensor_2
  TERM sem_contato    := TRAPE 0 0.3 0.6 0.8;
  TERM contato  := TRAPE 0.6 0.75 0.85 1;
END_FUZZIFY

FUZZIFY sensor_3
  TERM sem_contato    := TRAPE 0 0.3 0.6 0.8;
  TERM contato  := TRAPE 0.6 0.75 0.85 1;
END_FUZZIFY


DEFUZZIFY motor_esquerdo
  TERM forca_negativa := TRIAN -1 -0.8 0;
  TERM neutro     := TRIAN -0.5 -0.1 0.5;
  TERM forca_positiva  := TRIAN 0 0.8 1;
  METHOD             : COA;
  DEFAULT            := 0;
END_DEFUZZIFY

DEFUZZIFY motor_direito
  TERM forca_negativa := TRIAN -1 -0.8 0;
  TERM neutro     := TRIAN -0.5 -0.1 0.5;
  TERM forca_positiva  := TRIAN 0 0.8 1;
  METHOD             : COA;
  DEFAULT            := 0;
END_DEFUZZIFY

 

RULEBLOCK No1
  AND  : MIN;         // Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
  ACT  : MIN;         // Use 'min' activation method
  ACCU : MAX;         // Use 'max' accumulation method

  //regra para virar para a direita, falta implementar o motor direito
  RULE 1  : IF sensor_1 IS contato AND sensor_2 IS contato AND sensor_3 IS sem_contato  THEN motor_esquerdo IS forca_positiva;
  
  //regra para virar para a esquerda, falta implementar o motor direito
  RULE 2  : IF sensor_3 IS contato AND sensor_2 IS contato AND sensor_1 IS sem_contato  THEN motor_direito IS forca_positiva;
 
 
END_RULEBLOCK

END_FUNCTION_BLOCK
